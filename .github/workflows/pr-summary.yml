name: PR Summary with OpenAI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: read


jobs:
  summarize_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check Token Permissions
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/permissions

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch previous commit to get the diff

      - name: Get PR diff
        run: |
          git diff HEAD^ > pr_diff.txt
          cat pr_diff.txt

      - name: Summarize with OpenAI
        id: summarize
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          DIFF=$(cat pr_diff.txt | jq -Rs .) # Convert diff to a proper JSON string
          echo "DIFF Content: $DIFF" # Debugging output
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
            {
              "model": "gpt-4",
              "messages": [
                {"role": "system", "content": "Summarize the following Git diff changes in markdown format, separating summaries by file. Each file should be in its own section with a header in the format '### <filename>'""},
                {"role": "user", "content": $DIFF}
              ]
            }
          EOF
          )
          echo "summary<<EOF" >> $GITHUB_ENV
          echo "$(echo $RESPONSE | jq -r '.choices[0].message.content')" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug OpenAI Response
        run: echo "$RESPONSE"


      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = process.env.summary;
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `### PR Summary\n\n${summary}`
            });
